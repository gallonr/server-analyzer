#!/bin/bash
# Script de d√©ploiement sur serveur distant
# Usage: ./deploy.sh

set -e  # Arr√™ter en cas d'erreur

# Configuration
REMOTE_USER="rgallon"
REMOTE_HOST="195.83.28.108"
REMOTE_PATH="~/server-analyzer"
LOCAL_PATH="/home/rgallon/Documents/RECHERCHE/GestionServeurIntechmer/server-analyzer"

echo "========================================="
echo "D√©ploiement Server Analyzer"
echo "========================================="
echo "Serveur: ${REMOTE_USER}@${REMOTE_HOST}"
echo "Chemin distant: ${REMOTE_PATH}"
echo ""

# V√©rifier connexion SSH
echo "üì° V√©rification connexion SSH..."
if ! ssh -o BatchMode=yes -o ConnectTimeout=5 ${REMOTE_USER}@${REMOTE_HOST} echo "OK" 2>/dev/null; then
    echo "‚ùå Impossible de se connecter au serveur"
    echo "   V√©rifiez votre connexion SSH ou configurez les cl√©s SSH"
    exit 1
fi
echo "‚úì Connexion SSH OK"
echo ""

# Cr√©er le dossier distant si n√©cessaire
echo "üìÅ Cr√©ation du r√©pertoire distant..."
ssh ${REMOTE_USER}@${REMOTE_HOST} "mkdir -p ${REMOTE_PATH}"
echo "‚úì R√©pertoire cr√©√©"
echo ""

# Synchroniser les fichiers (exclure venv, cache, etc.)
echo "üì§ Transfert des fichiers..."
rsync -avz --progress \
    --exclude='venv/' \
    --exclude='__pycache__/' \
    --exclude='.pytest_cache/' \
    --exclude='*.pyc' \
    --exclude='.git/' \
    --exclude='data/' \
    --exclude='logs/' \
    --exclude='config.yaml' \
    ${LOCAL_PATH}/ ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH}/

echo "‚úì Fichiers transf√©r√©s"
echo ""

# Installer/mettre √† jour l'environnement Python sur le serveur
echo "üêç Configuration environnement Python distant..."
ssh ${REMOTE_USER}@${REMOTE_HOST} << 'ENDSSH'
cd ~/server-analyzer

# V√©rifier Python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 non trouv√© sur le serveur"
    exit 1
fi

PYTHON_VERSION=$(python3 --version)
echo "Python version: ${PYTHON_VERSION}"

# V√©rifier si python3-venv est install√©
echo "V√©rification de python3-venv..."
if ! python3 -m venv --help &> /dev/null; then
    echo "‚ö†Ô∏è  python3-venv n'est pas install√©"
    echo "üì¶ Installation de python3-venv (n√©cessite sudo)..."
    
    # D√©tecter la version de Python
    PYTHON_VER=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1,2)
    
    # Installer python3-venv
    if sudo apt install -y python3-venv python${PYTHON_VER}-venv 2>/dev/null; then
        echo "‚úì python3-venv install√© avec succ√®s"
    else
        echo "‚ùå Impossible d'installer python3-venv automatiquement"
        echo "   Veuillez ex√©cuter manuellement:"
        echo "   sudo apt install python3-venv python${PYTHON_VER}-venv"
        exit 1
    fi
fi

# Cr√©er venv si n√©cessaire
if [ ! -d "venv" ]; then
    echo "Cr√©ation environnement virtuel..."
    python3 -m venv venv
    
    if [ $? -ne 0 ]; then
        echo "‚ùå √âchec de la cr√©ation de l'environnement virtuel"
        exit 1
    fi
    echo "‚úì Environnement virtuel cr√©√©"
else
    echo "‚úì Environnement virtuel d√©j√† pr√©sent"
fi

# V√©rifier que venv existe bien
if [ ! -f "venv/bin/activate" ]; then
    echo "‚ùå venv/bin/activate n'existe pas"
    echo "   Suppression et recr√©ation de venv..."
    rm -rf venv
    python3 -m venv venv
    
    if [ $? -ne 0 ]; then
        echo "‚ùå √âchec de la cr√©ation de l'environnement virtuel"
        echo "   V√©rifiez que python3-venv est install√©:"
        echo "   sudo apt install python3-venv"
        exit 1
    fi
fi

# Activer et installer d√©pendances
echo "Installation des d√©pendances Python..."
source venv/bin/activate

if [ $? -ne 0 ]; then
    echo "‚ùå Impossible d'activer l'environnement virtuel"
    exit 1
fi

pip install --upgrade pip setuptools wheel -q

if [ $? -ne 0 ]; then
    echo "‚ùå √âchec de mise √† jour pip"
    exit 1
fi

pip install -r requirements.txt -q

if [ $? -ne 0 ]; then
    echo "‚ùå √âchec d'installation des d√©pendances"
    exit 1
fi

echo "‚úì Environnement Python configur√©"

# V√©rifier config.yaml
if [ ! -f "config.yaml" ]; then
    echo "‚ö†Ô∏è  config.yaml non trouv√©, copie de l'exemple..."
    cp config.yaml.example config.yaml
    echo "   Pensez √† √©diter config.yaml avec les bons chemins!"
fi

# Cr√©er les dossiers n√©cessaires
mkdir -p data/checkpoints data/exports logs

echo "‚úì Structure de dossiers cr√©√©e"
ENDSSH

echo ""
echo "========================================="
echo "‚úÖ D√©ploiement termin√© avec succ√®s!"
echo "========================================="
echo ""
echo "Prochaines √©tapes:"
echo "1. Connectez-vous au serveur:"
echo "   ssh ${REMOTE_USER}@${REMOTE_HOST}"
echo ""
echo "2. Configurez les chemins √† analyser:"
echo "   cd ${REMOTE_PATH}"
echo "   nano config.yaml"
echo ""
echo "3. Testez la configuration:"
echo "   source venv/bin/activate"
echo "   python src/config_validator.py"
echo ""
echo "4. Lancez le scan (Phase 1):"
echo "   python scripts/run_scan.py"
echo ""
